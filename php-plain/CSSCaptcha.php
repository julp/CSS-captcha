<?php
interface CSSCaptchaStoreInterface
{
    public function get(/*!7 string */$key)/*!7 : bool*/;
    public function set(/*!7 string */$key, array $data)/*!7 : bool*/;
    public function remove(/*!7 string */$key)/*!7 : bool*/;
}

class CSSCaptchaSessionStore implements CSSCaptchaStoreInterface
{
    protected $_prefix;

    public function __construct(/*!7 string */$prefix = 'captcha_')
    {
        $this->_prefix = $prefix;
    }

    private static function checkActiveSession()
    {
        if (function_exists('session_status') && PHP_SESSION_ACTIVE != session_status()) {
            throw new Exception('CSSCaptcha implies an active session');
        }
    }

    public function get(/*!7 string */$key)
    {
        self::checkActiveSession();

        return $_SESSION[$this->_prefix . $key];
    }

    public function set(/*!7 string */$key, array $data)
    {
        self::checkActiveSession();
        $_SESSION[$this->_prefix . $key] = $data;

        return TRUE;
    }

    public function remove(/*!7 string */$key)
    {
        self::checkActiveSession();
        unset($_SESSION[$this->_prefix . $key]);

        return TRUE;
    }
}

class CSSCaptcha
{
    const RENDER_CSS = 0x01;
    const RENDER_HTML = 0x10;

    const NEVER = __LINE__;
    const ALWAYS = __LINE__;
    const RANDOM = __LINE__;

    const COLOR_NONE = 0;
    const COLOR_RED = __LINE__;
    const COLOR_BLUE = __LINE__;
    const COLOR_GREEN = __LINE__;
    const COLOR_DARK = __LINE__;
    const COLOR_LIGHT = __LINE__;

    const UNICODE_1_1_0 = __LINE__;
    const UNICODE_1_1_5 = __LINE__;
    const UNICODE_2_0_0 = __LINE__;
    const UNICODE_2_1_0 = __LINE__;
    const UNICODE_2_1_2 = __LINE__;
    const UNICODE_2_1_5 = __LINE__;
    const UNICODE_2_1_8 = __LINE__;
    const UNICODE_2_1_9 = __LINE__;
    const UNICODE_3_0_0 = __LINE__;
    const UNICODE_3_0_1 = __LINE__;
    const UNICODE_3_1_0 = __LINE__;
    const UNICODE_3_1_1 = __LINE__;
    const UNICODE_3_2_0 = __LINE__;
    const UNICODE_4_0_0 = __LINE__;
    const UNICODE_4_0_1 = __LINE__;
    const UNICODE_4_1_0 = __LINE__;
    const UNICODE_5_0_0 = __LINE__;
    const UNICODE_5_1_0 = __LINE__;
    const UNICODE_5_2_0 = __LINE__;
    const UNICODE_6_0_0 = __LINE__;
    const UNICODE_6_1_0 = __LINE__;
    const UNICODE_6_2_0 = __LINE__;
    const UNICODE_6_3_0 = __LINE__;
    const UNICODE_7_0_0 = __LINE__;
    const UNICODE_8_0_0 = __LINE__;

    const UNICODE_FIRST = self::UNICODE_1_1_0;
    const UNICODE_LAST  = self::UNICODE_8_0_0;

    const ATTR_ALPHABET = __LINE__;
    const ATTR_REVERSED = __LINE__;
    const ATTR_NOISE_LENGTH = __LINE__;
    const ATTR_HTML_WRAPPER_ID = __LINE__;
    const ATTR_HTML_LETTER_TAG = __LINE__;
    const ATTR_HTML_WRAPPER_TAG = __LINE__;
    const ATTR_UNICODE_VERSION = __LINE__;
    const ATTR_CHALLENGE_LENGTH = __LINE__;
    const ATTR_FAKE_CHARACTERS_COLOR = __LINE__;
    const ATTR_FAKE_CHARACTERS_STYLE = __LINE__;
    const ATTR_FAKE_CHARACTERS_LENGTH = __LINE__;
    const ATTR_SKIP_UNICODE_FOR_CHALLENGE = __LINE__;
    const ATTR_SIGNIFICANT_CHARACTERS_COLOR = __LINE__;
    const ATTR_SIGNIFICANT_CHARACTERS_STYLE = __LINE__;

    const TABLE = [
        0x0030, 0x2070, 0x2080, 0x24EA, 0xFF10, 0x01D7CE, 0x01D7D8, 0x01D7E2, 0x01D7EC, 0x01D7F6, 0x0031, 0x00B9, 0x2081, 0x2460, 0xFF11, 0x01D7CF, 0x01D7D9, 0x01D7E3, 0x01D7ED, 0x01D7F7,
        0x0032, 0x00B2, 0x2082, 0x2461, 0xFF12, 0x01D7D0, 0x01D7DA, 0x01D7E4, 0x01D7EE, 0x01D7F8, 0x0033, 0x00B3, 0x2083, 0x2462, 0xFF13, 0x01D7D1, 0x01D7DB, 0x01D7E5, 0x01D7EF, 0x01D7F9,
        0x0034, 0x2074, 0x2084, 0x2463, 0xFF14, 0x01D7D2, 0x01D7DC, 0x01D7E6, 0x01D7F0, 0x01D7FA, 0x0035, 0x2075, 0x2085, 0x2464, 0xFF15, 0x01D7D3, 0x01D7DD, 0x01D7E7, 0x01D7F1, 0x01D7FB,
        0x0036, 0x2076, 0x2086, 0x2465, 0xFF16, 0x01D7D4, 0x01D7DE, 0x01D7E8, 0x01D7F2, 0x01D7FC, 0x0037, 0x2077, 0x2087, 0x2466, 0xFF17, 0x01D7D5, 0x01D7DF, 0x01D7E9, 0x01D7F3, 0x01D7FD,
        0x0038, 0x2078, 0x2088, 0x2467, 0xFF18, 0x01D7D6, 0x01D7E0, 0x01D7EA, 0x01D7F4, 0x01D7FE, 0x0039, 0x2079, 0x2089, 0x2468, 0xFF19, 0x01D7D7, 0x01D7E1, 0x01D7EB, 0x01D7F5, 0x01D7FF,
        0x0041, 0x0061, 0x00AA, 0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x0100, 0x0101, 0x0102, 0x0103, 0x0104, 0x0105, 0x01CD, 0x01CE,
        0x01DE, 0x01DF, 0x01E0, 0x01E1, 0x01FA, 0x01FB, 0x0200, 0x0201, 0x0202, 0x0203, 0x1E00, 0x1E01, 0x1EA0, 0x1EA1, 0x1EA2, 0x1EA3, 0x1EA4, 0x1EA5, 0x1EA6, 0x1EA7, 0x1EA8, 0x1EA9, 0x1EAA,
        0x1EAB, 0x1EAC, 0x1EAD, 0x1EAE, 0x1EAF, 0x1EB0, 0x1EB1, 0x1EB2, 0x1EB3, 0x1EB4, 0x1EB5, 0x1EB6, 0x1EB7, 0x212B, 0x24B6, 0x24D0, 0xFF21, 0xFF41, 0x0226, 0x0227, 0x01D400, 0x01D41A,
        0x01D434, 0x01D44E, 0x01D468, 0x01D482, 0x01D49C, 0x01D4B6, 0x01D4D0, 0x01D4EA, 0x01D504, 0x01D51E, 0x01D538, 0x01D552, 0x01D56C, 0x01D586, 0x01D5A0, 0x01D5BA, 0x01D5D4, 0x01D5EE,
        0x01D608, 0x01D622, 0x01D63C, 0x01D656, 0x01D670, 0x01D68A, 0x1D2C, 0x1D43, 0x2090, 0x01F130, 0x0042, 0x0062, 0x1E02, 0x1E03, 0x1E04, 0x1E05, 0x1E06, 0x1E07, 0x212C, 0x24B7, 0x24D1,
        0xFF22, 0xFF42, 0x01D401, 0x01D41B, 0x01D435, 0x01D44F, 0x01D469, 0x01D483, 0x01D4B7, 0x01D4D1, 0x01D4EB, 0x01D505, 0x01D51F, 0x01D539, 0x01D553, 0x01D56D, 0x01D587, 0x01D5A1,
        0x01D5BB, 0x01D5D5, 0x01D5EF, 0x01D609, 0x01D623, 0x01D63D, 0x01D657, 0x01D671, 0x01D68B, 0x1D2E, 0x1D47, 0x01F131, 0x0043, 0x0063, 0x00C7, 0x00E7, 0x0106, 0x0107, 0x0108, 0x0109,
        0x010A, 0x010B, 0x010C, 0x010D, 0x1E08, 0x1E09, 0x2102, 0x212D, 0x216D, 0x217D, 0x24B8, 0x24D2, 0xFF23, 0xFF43, 0x01D402, 0x01D41C, 0x01D436, 0x01D450, 0x01D46A, 0x01D484, 0x01D49E,
        0x01D4B8, 0x01D4D2, 0x01D4EC, 0x01D520, 0x01D554, 0x01D56E, 0x01D588, 0x01D5A2, 0x01D5BC, 0x01D5D6, 0x01D5F0, 0x01D60A, 0x01D624, 0x01D63E, 0x01D658, 0x01D672, 0x01D68C, 0x1D9C,
        0x01F12B, 0x01F132, 0x0044, 0x0064, 0x010E, 0x010F, 0x1E0A, 0x1E0B, 0x1E0C, 0x1E0D, 0x1E0E, 0x1E0F, 0x1E10, 0x1E11, 0x1E12, 0x1E13, 0x216E, 0x217E, 0x24B9, 0x24D3, 0xFF24, 0xFF44,
        0x2145, 0x2146, 0x01D403, 0x01D41D, 0x01D437, 0x01D451, 0x01D46B, 0x01D485, 0x01D49F, 0x01D4B9, 0x01D4D3, 0x01D4ED, 0x01D507, 0x01D521, 0x01D53B, 0x01D555, 0x01D56F, 0x01D589,
        0x01D5A3, 0x01D5BD, 0x01D5D7, 0x01D5F1, 0x01D60B, 0x01D625, 0x01D63F, 0x01D659, 0x01D673, 0x01D68D, 0x1D30, 0x1D48, 0x01F133, 0x0045, 0x0065, 0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00E8,
        0x00E9, 0x00EA, 0x00EB, 0x0112, 0x0113, 0x0114, 0x0115, 0x0116, 0x0117, 0x0118, 0x0119, 0x011A, 0x011B, 0x0204, 0x0205, 0x0206, 0x0207, 0x1E14, 0x1E15, 0x1E16, 0x1E17, 0x1E18, 0x1E19,
        0x1E1A, 0x1E1B, 0x1E1C, 0x1E1D, 0x1EB8, 0x1EB9, 0x1EBA, 0x1EBB, 0x1EBC, 0x1EBD, 0x1EBE, 0x1EBF, 0x1EC0, 0x1EC1, 0x1EC2, 0x1EC3, 0x1EC4, 0x1EC5, 0x1EC6, 0x1EC7, 0x212F, 0x2130, 0x24BA,
        0x24D4, 0xFF25, 0xFF45, 0x0228, 0x0229, 0x2147, 0x01D404, 0x01D41E, 0x01D438, 0x01D452, 0x01D46C, 0x01D486, 0x01D4D4, 0x01D4EE, 0x01D508, 0x01D522, 0x01D53C, 0x01D556, 0x01D570,
        0x01D58A, 0x01D5A4, 0x01D5BE, 0x01D5D8, 0x01D5F2, 0x01D60C, 0x01D626, 0x01D640, 0x01D65A, 0x01D674, 0x01D68E, 0x1D31, 0x1D49, 0x2091, 0x01F134, 0x0046, 0x0066, 0x1E1E, 0x1E1F,
        0x2131, 0x24BB, 0x24D5, 0xFF26, 0xFF46, 0x01D405, 0x01D41F, 0x01D439, 0x01D453, 0x01D46D, 0x01D487, 0x01D4BB, 0x01D4D5, 0x01D4EF, 0x01D509, 0x01D523, 0x01D53D, 0x01D557, 0x01D571,
        0x01D58B, 0x01D5A5, 0x01D5BF, 0x01D5D9, 0x01D5F3, 0x01D60D, 0x01D627, 0x01D641, 0x01D65B, 0x01D675, 0x01D68F, 0x1DA0, 0x01F135, 0x0047, 0x0067, 0x011C, 0x011D, 0x011E, 0x011F,
        0x0120, 0x0121, 0x0122, 0x0123, 0x01E6, 0x01E7, 0x01F4, 0x01F5, 0x1E20, 0x1E21, 0x210A, 0x24BC, 0x24D6, 0xFF27, 0xFF47, 0x01D406, 0x01D420, 0x01D43A, 0x01D454, 0x01D46E, 0x01D488,
        0x01D4A2, 0x01D4D6, 0x01D4F0, 0x01D50A, 0x01D524, 0x01D53E, 0x01D558, 0x01D572, 0x01D58C, 0x01D5A6, 0x01D5C0, 0x01D5DA, 0x01D5F4, 0x01D60E, 0x01D628, 0x01D642, 0x01D65C, 0x01D676,
        0x01D690, 0x1D33, 0x1D4D, 0x01F136, 0x0048, 0x0068, 0x0124, 0x0125, 0x02B0, 0x1E22, 0x1E23, 0x1E24, 0x1E25, 0x1E26, 0x1E27, 0x1E28, 0x1E29, 0x1E2A, 0x1E2B, 0x1E96, 0x210B, 0x210C,
        0x210D, 0x210E, 0x24BD, 0x24D7, 0xFF28, 0xFF48, 0x021E, 0x021F, 0x01D407, 0x01D421, 0x01D43B, 0x01D46F, 0x01D489, 0x01D4BD, 0x01D4D7, 0x01D4F1, 0x01D525, 0x01D559, 0x01D573, 0x01D58D,
        0x01D5A7, 0x01D5C1, 0x01D5DB, 0x01D5F5, 0x01D60F, 0x01D629, 0x01D643, 0x01D65D, 0x01D677, 0x01D691, 0x1D34, 0x2095, 0x01F137, 0x0049, 0x0069, 0x00CC, 0x00CD, 0x00CE, 0x00CF, 0x00EC,
        0x00ED, 0x00EE, 0x00EF, 0x0128, 0x0129, 0x012A, 0x012B, 0x012C, 0x012D, 0x012E, 0x012F, 0x0130, 0x01CF, 0x01D0, 0x0208, 0x0209, 0x020A, 0x020B, 0x1E2C, 0x1E2D, 0x1E2E, 0x1E2F, 0x1EC8,
        0x1EC9, 0x1ECA, 0x1ECB, 0x2110, 0x2111, 0x2160, 0x2170, 0x24BE, 0x24D8, 0xFF29, 0xFF49, 0x2071, 0x2139, 0x2148, 0x01D408, 0x01D422, 0x01D43C, 0x01D456, 0x01D470, 0x01D48A, 0x01D4BE,
        0x01D4D8, 0x01D4F2, 0x01D526, 0x01D540, 0x01D55A, 0x01D574, 0x01D58E, 0x01D5A8, 0x01D5C2, 0x01D5DC, 0x01D5F6, 0x01D610, 0x01D62A, 0x01D644, 0x01D65E, 0x01D678, 0x01D692, 0x1D35,
        0x1D62, 0x01F138, 0x004A, 0x006A, 0x0134, 0x0135, 0x01F0, 0x02B2, 0x24BF, 0x24D9, 0xFF2A, 0xFF4A, 0x2149, 0x01D409, 0x01D423, 0x01D43D, 0x01D457, 0x01D471, 0x01D48B, 0x01D4A5, 0x01D4BF,
        0x01D4D9, 0x01D4F3, 0x01D50D, 0x01D527, 0x01D541, 0x01D55B, 0x01D575, 0x01D58F, 0x01D5A9, 0x01D5C3, 0x01D5DD, 0x01D5F7, 0x01D611, 0x01D62B, 0x01D645, 0x01D65F, 0x01D679, 0x01D693,
        0x1D36, 0x2C7C, 0x01F139, 0x004B, 0x006B, 0x0136, 0x0137, 0x01E8, 0x01E9, 0x1E30, 0x1E31, 0x1E32, 0x1E33, 0x1E34, 0x1E35, 0x212A, 0x24C0, 0x24DA, 0xFF2B, 0xFF4B, 0x01D40A, 0x01D424,
        0x01D43E, 0x01D458, 0x01D472, 0x01D48C, 0x01D4A6, 0x01D4C0, 0x01D4DA, 0x01D4F4, 0x01D50E, 0x01D528, 0x01D542, 0x01D55C, 0x01D576, 0x01D590, 0x01D5AA, 0x01D5C4, 0x01D5DE, 0x01D5F8,
        0x01D612, 0x01D62C, 0x01D646, 0x01D660, 0x01D67A, 0x01D694, 0x1D37, 0x1D4F, 0x2096, 0x01F13A, 0x004C, 0x006C, 0x0139, 0x013A, 0x013B, 0x013C, 0x013D, 0x013E, 0x02E1, 0x1E36, 0x1E37,
        0x1E38, 0x1E39, 0x1E3A, 0x1E3B, 0x1E3C, 0x1E3D, 0x2112, 0x2113, 0x216C, 0x217C, 0x24C1, 0x24DB, 0xFF2C, 0xFF4C, 0x01D40B, 0x01D425, 0x01D43F, 0x01D459, 0x01D473, 0x01D48D, 0x01D4DB,
        0x01D4F5, 0x01D50F, 0x01D529, 0x01D543, 0x01D55D, 0x01D577, 0x01D591, 0x01D5AB, 0x01D5C5, 0x01D5DF, 0x01D5F9, 0x01D613, 0x01D62D, 0x01D647, 0x01D661, 0x01D67B, 0x01D695, 0x1D38,
        0x01D4C1, 0x2097, 0x01F13B, 0x004D, 0x006D, 0x1E3E, 0x1E3F, 0x1E40, 0x1E41, 0x1E42, 0x1E43, 0x2133, 0x216F, 0x217F, 0x24C2, 0x24DC, 0xFF2D, 0xFF4D, 0x01D40C, 0x01D426, 0x01D440,
        0x01D45A, 0x01D474, 0x01D48E, 0x01D4C2, 0x01D4DC, 0x01D4F6, 0x01D510, 0x01D52A, 0x01D544, 0x01D55E, 0x01D578, 0x01D592, 0x01D5AC, 0x01D5C6, 0x01D5E0, 0x01D5FA, 0x01D614, 0x01D62E,
        0x01D648, 0x01D662, 0x01D67C, 0x01D696, 0x1D39, 0x1D50, 0x2098, 0x01F13C, 0x004E, 0x006E, 0x00D1, 0x00F1, 0x0143, 0x0144, 0x0145, 0x0146, 0x0147, 0x0148, 0x1E44, 0x1E45, 0x1E46,
        0x1E47, 0x1E48, 0x1E49, 0x1E4A, 0x1E4B, 0x207F, 0x2115, 0x24C3, 0x24DD, 0xFF2E, 0xFF4E, 0x01F8, 0x01F9, 0x01D40D, 0x01D427, 0x01D441, 0x01D45B, 0x01D475, 0x01D48F, 0x01D4A9, 0x01D4C3,
        0x01D4DD, 0x01D4F7, 0x01D511, 0x01D52B, 0x01D55F, 0x01D579, 0x01D593, 0x01D5AD, 0x01D5C7, 0x01D5E1, 0x01D5FB, 0x01D615, 0x01D62F, 0x01D649, 0x01D663, 0x01D67D, 0x01D697, 0x1D3A,
        0x01F13D, 0x2099, 0x004F, 0x006F, 0x00BA, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x014C, 0x014D, 0x014E, 0x014F, 0x0150, 0x0151, 0x01A0, 0x01A1,
        0x01D1, 0x01D2, 0x01EA, 0x01EB, 0x01EC, 0x01ED, 0x020C, 0x020D, 0x020E, 0x020F, 0x1E4C, 0x1E4D, 0x1E4E, 0x1E4F, 0x1E50, 0x1E51, 0x1E52, 0x1E53, 0x1ECC, 0x1ECD, 0x1ECE, 0x1ECF, 0x1ED0,
        0x1ED1, 0x1ED2, 0x1ED3, 0x1ED4, 0x1ED5, 0x1ED6, 0x1ED7, 0x1ED8, 0x1ED9, 0x1EDA, 0x1EDB, 0x1EDC, 0x1EDD, 0x1EDE, 0x1EDF, 0x1EE0, 0x1EE1, 0x1EE2, 0x1EE3, 0x2134, 0x24C4, 0x24DE, 0xFF2F,
        0xFF4F, 0x022A, 0x022B, 0x022C, 0x022D, 0x022E, 0x022F, 0x0230, 0x0231, 0x01D40E, 0x01D428, 0x01D442, 0x01D45C, 0x01D476, 0x01D490, 0x01D4AA, 0x01D4DE, 0x01D4F8, 0x01D512, 0x01D52C,
        0x01D546, 0x01D560, 0x01D57A, 0x01D594, 0x01D5AE, 0x01D5C8, 0x01D5E2, 0x01D5FC, 0x01D616, 0x01D630, 0x01D64A, 0x01D664, 0x01D67E, 0x01D698, 0x1D3C, 0x1D52, 0x2092, 0x01F13E, 0x0050,
        0x0070, 0x1E54, 0x1E55, 0x1E56, 0x1E57, 0x2119, 0x24C5, 0x24DF, 0xFF30, 0xFF50, 0x01D40F, 0x01D429, 0x01D443, 0x01D45D, 0x01D477, 0x01D491, 0x01D4AB, 0x01D4C5, 0x01D4DF, 0x01D4F9,
        0x01D513, 0x01D52D, 0x01D561, 0x01D57B, 0x01D595, 0x01D5AF, 0x01D5C9, 0x01D5E3, 0x01D5FD, 0x01D617, 0x01D631, 0x01D64B, 0x01D665, 0x01D67F, 0x01D699, 0x1D3E, 0x1D56, 0x01F13F,
        0x209A, 0x0051, 0x0071, 0x211A, 0x24C6, 0x24E0, 0xFF31, 0xFF51, 0x01D410, 0x01D42A, 0x01D444, 0x01D45E, 0x01D478, 0x01D492, 0x01D4AC, 0x01D4C6, 0x01D4E0, 0x01D4FA, 0x01D514, 0x01D52E,
        0x01D562, 0x01D57C, 0x01D596, 0x01D5B0, 0x01D5CA, 0x01D5E4, 0x01D5FE, 0x01D618, 0x01D632, 0x01D64C, 0x01D666, 0x01D680, 0x01D69A, 0x01F140, 0x0052, 0x0072, 0x0154, 0x0155, 0x0156,
        0x0157, 0x0158, 0x0159, 0x0210, 0x0211, 0x0212, 0x0213, 0x02B3, 0x1E58, 0x1E59, 0x1E5A, 0x1E5B, 0x1E5C, 0x1E5D, 0x1E5E, 0x1E5F, 0x211B, 0x211C, 0x211D, 0x24C7, 0x24E1, 0xFF32, 0xFF52,
        0x01D411, 0x01D42B, 0x01D445, 0x01D45F, 0x01D479, 0x01D493, 0x01D4C7, 0x01D4E1, 0x01D4FB, 0x01D52F, 0x01D563, 0x01D57D, 0x01D597, 0x01D5B1, 0x01D5CB, 0x01D5E5, 0x01D5FF, 0x01D619,
        0x01D633, 0x01D64D, 0x01D667, 0x01D681, 0x01D69B, 0x1D3F, 0x1D63, 0x01F12C, 0x01F141, 0x0053, 0x0073, 0x015A, 0x015B, 0x015C, 0x015D, 0x015E, 0x015F, 0x0160, 0x0161, 0x017F, 0x02E2,
        0x1E60, 0x1E61, 0x1E62, 0x1E63, 0x1E64, 0x1E65, 0x1E66, 0x1E67, 0x1E68, 0x1E69, 0x24C8, 0x24E2, 0xFF33, 0xFF53, 0x1E9B, 0x0218, 0x0219, 0x01D412, 0x01D42C, 0x01D446, 0x01D460, 0x01D47A,
        0x01D494, 0x01D4AE, 0x01D4C8, 0x01D4E2, 0x01D4FC, 0x01D516, 0x01D530, 0x01D54A, 0x01D564, 0x01D57E, 0x01D598, 0x01D5B2, 0x01D5CC, 0x01D5E6, 0x01D600, 0x01D61A, 0x01D634, 0x01D64E,
        0x01D668, 0x01D682, 0x01D69C, 0x01F142, 0x209B, 0x0054, 0x0074, 0x0162, 0x0163, 0x0164, 0x0165, 0x1E6A, 0x1E6B, 0x1E6C, 0x1E6D, 0x1E6E, 0x1E6F, 0x1E70, 0x1E71, 0x1E97, 0x24C9, 0x24E3,
        0xFF34, 0xFF54, 0x021A, 0x021B, 0x01D413, 0x01D42D, 0x01D447, 0x01D461, 0x01D47B, 0x01D495, 0x01D4AF, 0x01D4C9, 0x01D4E3, 0x01D4FD, 0x01D517, 0x01D531, 0x01D54B, 0x01D565, 0x01D57F,
        0x01D599, 0x01D5B3, 0x01D5CD, 0x01D5E7, 0x01D601, 0x01D61B, 0x01D635, 0x01D64F, 0x01D669, 0x01D683, 0x01D69D, 0x1D40, 0x1D57, 0x209C, 0x01F143, 0x0055, 0x0075, 0x00D9, 0x00DA,
        0x00DB, 0x00DC, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x0168, 0x0169, 0x016A, 0x016B, 0x016C, 0x016D, 0x016E, 0x016F, 0x0170, 0x0171, 0x0172, 0x0173, 0x01AF, 0x01B0, 0x01D3, 0x01D4, 0x01D5,
        0x01D6, 0x01D7, 0x01D8, 0x01D9, 0x01DA, 0x01DB, 0x01DC, 0x0214, 0x0215, 0x0216, 0x0217, 0x1E72, 0x1E73, 0x1E74, 0x1E75, 0x1E76, 0x1E77, 0x1E78, 0x1E79, 0x1E7A, 0x1E7B, 0x1EE4, 0x1EE5,
        0x1EE6, 0x1EE7, 0x1EE8, 0x1EE9, 0x1EEA, 0x1EEB, 0x1EEC, 0x1EED, 0x1EEE, 0x1EEF, 0x1EF0, 0x1EF1, 0x24CA, 0x24E4, 0xFF35, 0xFF55, 0x01D414, 0x01D42E, 0x01D448, 0x01D462, 0x01D47C,
        0x01D496, 0x01D4B0, 0x01D4CA, 0x01D4E4, 0x01D4FE, 0x01D518, 0x01D532, 0x01D54C, 0x01D566, 0x01D580, 0x01D59A, 0x01D5B4, 0x01D5CE, 0x01D5E8, 0x01D602, 0x01D61C, 0x01D636, 0x01D650,
        0x01D66A, 0x01D684, 0x01D69E, 0x1D41, 0x1D58, 0x1D64, 0x01F144, 0x0056, 0x0076, 0x1E7C, 0x1E7D, 0x1E7E, 0x1E7F, 0x2164, 0x2174, 0x24CB, 0x24E5, 0xFF36, 0xFF56, 0x01D415, 0x01D42F,
        0x01D449, 0x01D463, 0x01D47D, 0x01D497, 0x01D4B1, 0x01D4CB, 0x01D4E5, 0x01D4FF, 0x01D519, 0x01D533, 0x01D54D, 0x01D567, 0x01D581, 0x01D59B, 0x01D5B5, 0x01D5CF, 0x01D5E9, 0x01D603,
        0x01D61D, 0x01D637, 0x01D651, 0x01D66B, 0x01D685, 0x01D69F, 0x1D5B, 0x1D65, 0x2C7D, 0x01F145, 0x0057, 0x0077, 0x0174, 0x0175, 0x02B7, 0x1E80, 0x1E81, 0x1E82, 0x1E83, 0x1E84, 0x1E85,
        0x1E86, 0x1E87, 0x1E88, 0x1E89, 0x1E98, 0x24CC, 0x24E6, 0xFF37, 0xFF57, 0x01D416, 0x01D430, 0x01D44A, 0x01D464, 0x01D47E, 0x01D498, 0x01D4B2, 0x01D4CC, 0x01D4E6, 0x01D500, 0x01D51A,
        0x01D534, 0x01D54E, 0x01D568, 0x01D582, 0x01D59C, 0x01D5B6, 0x01D5D0, 0x01D5EA, 0x01D604, 0x01D61E, 0x01D638, 0x01D652, 0x01D66C, 0x01D686, 0x01D6A0, 0x1D42, 0x01F146, 0x0058,
        0x0078, 0x02E3, 0x1E8A, 0x1E8B, 0x1E8C, 0x1E8D, 0x2169, 0x2179, 0x24CD, 0x24E7, 0xFF38, 0xFF58, 0x01D417, 0x01D431, 0x01D44B, 0x01D465, 0x01D47F, 0x01D499, 0x01D4B3, 0x01D4CD, 0x01D4E7,
        0x01D501, 0x01D51B, 0x01D535, 0x01D54F, 0x01D569, 0x01D583, 0x01D59D, 0x01D5B7, 0x01D5D1, 0x01D5EB, 0x01D605, 0x01D61F, 0x01D639, 0x01D653, 0x01D66D, 0x01D687, 0x01D6A1, 0x2093,
        0x01F147, 0x0059, 0x0079, 0x00DD, 0x00FD, 0x00FF, 0x0176, 0x0177, 0x0178, 0x02B8, 0x1E8E, 0x1E8F, 0x1E99, 0x1EF2, 0x1EF3, 0x1EF4, 0x1EF5, 0x1EF6, 0x1EF7, 0x1EF8, 0x1EF9, 0x24CE, 0x24E8,
        0xFF39, 0xFF59, 0x0232, 0x0233, 0x01D418, 0x01D432, 0x01D44C, 0x01D466, 0x01D480, 0x01D49A, 0x01D4B4, 0x01D4CE, 0x01D4E8, 0x01D502, 0x01D51C, 0x01D536, 0x01D550, 0x01D56A, 0x01D584,
        0x01D59E, 0x01D5B8, 0x01D5D2, 0x01D5EC, 0x01D606, 0x01D620, 0x01D63A, 0x01D654, 0x01D66E, 0x01D688, 0x01D6A2, 0x01F148, 0x005A, 0x007A, 0x0179, 0x017A, 0x017B, 0x017C, 0x017D,
        0x017E, 0x1E90, 0x1E91, 0x1E92, 0x1E93, 0x1E94, 0x1E95, 0x2124, 0x2128, 0x24CF, 0x24E9, 0xFF3A, 0xFF5A, 0x01D419, 0x01D433, 0x01D44D, 0x01D467, 0x01D481, 0x01D49B, 0x01D4B5, 0x01D4CF,
        0x01D4E9, 0x01D503, 0x01D537, 0x01D56B, 0x01D585, 0x01D59F, 0x01D5B9, 0x01D5D3, 0x01D5ED, 0x01D607, 0x01D621, 0x01D63B, 0x01D655, 0x01D66F, 0x01D689, 0x01D6A3, 0x1DBB, 0x01F149,
        0x0020, 0x002D, 0x005F, 0x00A0, 0x05BE, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x2010, 0x2011, 0x2012, 0x2013, 0x2014, 0x2015, 0x2028,
        0x2029, 0x203F, 0x2040, 0x3000, 0x301C, 0x3030, 0xFE31, 0xFE32, 0xFE33, 0xFE34, 0xFE4D, 0xFE4E, 0xFE4F, 0xFE58, 0xFE63, 0xFF0D, 0xFF3F, 0x058A, 0x1680, 0x1806, 0x202F, 0x205F, 0x30A0,
        0x2054, 0x2E17, 0x1400, 0x2E1A, 0x2E3A, 0x2E3B, 0x2E40, 0x0300, 0x0301, 0x0302, 0x0303, 0x0304, 0x0305, 0x0306, 0x0307, 0x0308, 0x0309, 0x030A, 0x030B, 0x030C, 0x030D, 0x030E, 0x030F,
        0x0310, 0x0311, 0x0312, 0x0313, 0x0314, 0x0315, 0x0316, 0x0317, 0x0318, 0x0319, 0x031A, 0x031B, 0x031C, 0x031D, 0x031E, 0x031F, 0x0320, 0x0321, 0x0322, 0x0323, 0x0324, 0x0325, 0x0326,
        0x0327, 0x0328, 0x0329, 0x032A, 0x032B, 0x032C, 0x032D, 0x032E, 0x032F, 0x0330, 0x0331, 0x0332, 0x0333, 0x0334, 0x0335, 0x0336, 0x0337, 0x0338, 0x0339, 0x033A, 0x033B, 0x033C, 0x033D,
        0x033E, 0x033F, 0x0340, 0x0341, 0x0342, 0x0343, 0x0344, 0x0345, 0x0360, 0x0361, 0x0483, 0x0484, 0x0485, 0x0486, 0x05B0, 0x05B1, 0x05B2, 0x05B3, 0x05B4, 0x05B5, 0x05B6, 0x05B7, 0x05B8,
        0x05B9, 0x05BB, 0x05BC, 0x05BD, 0x05BF, 0x05C1, 0x05C2, 0x064B, 0x064C, 0x064D, 0x064E, 0x064F, 0x0650, 0x0651, 0x0652, 0x0670, 0x06D6, 0x06D7, 0x06D8, 0x06D9, 0x06DA, 0x06DB, 0x06DC,
        0x06DF, 0x06E0, 0x06E1, 0x06E2, 0x06E3, 0x06E4, 0x06E7, 0x06E8, 0x06EA, 0x06EB, 0x06EC, 0x06ED, 0x0901, 0x0902, 0x093C, 0x0941, 0x0942, 0x0943, 0x0944, 0x0945, 0x0946, 0x0947, 0x0948,
        0x094D, 0x0951, 0x0952, 0x0953, 0x0954, 0x0962, 0x0963, 0x0981, 0x09BC, 0x09C1, 0x09C2, 0x09C3, 0x09C4, 0x09CD, 0x09E2, 0x09E3, 0x0A02, 0x0A3C, 0x0A41, 0x0A42, 0x0A47, 0x0A48, 0x0A4B,
        0x0A4C, 0x0A4D, 0x0A70, 0x0A71, 0x0A81, 0x0A82, 0x0ABC, 0x0AC1, 0x0AC2, 0x0AC3, 0x0AC4, 0x0AC5, 0x0AC7, 0x0AC8, 0x0ACD, 0x0B01, 0x0B3C, 0x0B3F, 0x0B41, 0x0B42, 0x0B43, 0x0B4D, 0x0B56,
        0x0B82, 0x0BC0, 0x0BCD, 0x0C3E, 0x0C3F, 0x0C40, 0x0C46, 0x0C47, 0x0C48, 0x0C4A, 0x0C4B, 0x0C4C, 0x0C4D, 0x0C55, 0x0C56, 0x0CBF, 0x0CC6, 0x0CCC, 0x0CCD, 0x0D41, 0x0D42, 0x0D43, 0x0D4D,
        0x0E31, 0x0E34, 0x0E35, 0x0E36, 0x0E37, 0x0E38, 0x0E39, 0x0E3A, 0x0E47, 0x0E48, 0x0E49, 0x0E4A, 0x0E4B, 0x0E4C, 0x0E4D, 0x0E4E, 0x0EB1, 0x0EB4, 0x0EB5, 0x0EB6, 0x0EB7, 0x0EB8, 0x0EB9,
        0x0EBB, 0x0EBC, 0x0EC8, 0x0EC9, 0x0ECA, 0x0ECB, 0x0ECC, 0x0ECD, 0x20D0, 0x20D1, 0x20D2, 0x20D3, 0x20D4, 0x20D5, 0x20D6, 0x20D7, 0x20D8, 0x20D9, 0x20DA, 0x20DB, 0x20DC, 0x20E1, 0x302A,
        0x302B, 0x302C, 0x302D, 0x3099, 0x309A, 0xFB1E, 0xFE20, 0xFE21, 0xFE22, 0xFE23, 0x0591, 0x0592, 0x0593, 0x0594, 0x0595, 0x0596, 0x0597, 0x0598, 0x0599, 0x059A, 0x059B, 0x059C, 0x059D,
        0x059E, 0x059F, 0x05A0, 0x05A1, 0x05A3, 0x05A4, 0x05A5, 0x05A6, 0x05A7, 0x05A8, 0x05A9, 0x05AA, 0x05AB, 0x05AC, 0x05AD, 0x05AE, 0x05AF, 0x05C4, 0x0F18, 0x0F19, 0x0F35, 0x0F37, 0x0F39,
        0x0F71, 0x0F72, 0x0F73, 0x0F74, 0x0F75, 0x0F76, 0x0F77, 0x0F78, 0x0F79, 0x0F7A, 0x0F7B, 0x0F7C, 0x0F7D, 0x0F7E, 0x0F80, 0x0F81, 0x0F82, 0x0F83, 0x0F84, 0x0F86, 0x0F87, 0x0F90, 0x0F91,
        0x0F92, 0x0F93, 0x0F94, 0x0F95, 0x0F97, 0x0F99, 0x0F9A, 0x0F9B, 0x0F9C, 0x0F9D, 0x0F9E, 0x0F9F, 0x0FA0, 0x0FA1, 0x0FA2, 0x0FA3, 0x0FA4, 0x0FA5, 0x0FA6, 0x0FA7, 0x0FA8, 0x0FA9, 0x0FAA,
        0x0FAB, 0x0FAC, 0x0FAD, 0x0FB1, 0x0FB2, 0x0FB3, 0x0FB4, 0x0FB5, 0x0FB6, 0x0FB7, 0x0FB9, 0x0346, 0x0347, 0x0348, 0x0349, 0x034A, 0x034B, 0x034C, 0x034D, 0x034E, 0x034F, 0x0362, 0x0363,
        0x0364, 0x0365, 0x0366, 0x0367, 0x0368, 0x0369, 0x036A, 0x036B, 0x036C, 0x036D, 0x036E, 0x036F, 0x0653, 0x0654, 0x0655, 0x0711, 0x0730, 0x0731, 0x0732, 0x0733, 0x0734, 0x0735, 0x0736,
        0x0737, 0x0738, 0x0739, 0x073A, 0x073B, 0x073C, 0x073D, 0x073E, 0x073F, 0x0740, 0x0741, 0x0742, 0x0743, 0x0744, 0x0745, 0x0746, 0x0747, 0x0748, 0x0749, 0x074A, 0x07A6, 0x07A7, 0x07A8,
        0x07A9, 0x07AA, 0x07AB, 0x07AC, 0x07AD, 0x07AE, 0x07AF, 0x07B0, 0x0DCA, 0x0DD2, 0x0DD3, 0x0DD4, 0x0DD6, 0x0F96, 0x0FAE, 0x0FAF, 0x0FB0, 0x0FB8, 0x0FBA, 0x0FBB, 0x0FBC, 0x0FC6, 0x102D,
        0x102E, 0x102F, 0x1030, 0x1032, 0x1036, 0x1037, 0x1039, 0x1058, 0x1059, 0x1712, 0x1713, 0x1714, 0x1732, 0x1733, 0x1734, 0x1752, 0x1753, 0x1772, 0x1773, 0x17B4, 0x17B5, 0x17B7, 0x17B8,
        0x17B9, 0x17BA, 0x17BB, 0x17BC, 0x17BD, 0x17C6, 0x17C9, 0x17CA, 0x17CB, 0x17CC, 0x17CD, 0x17CE, 0x17CF, 0x17D0, 0x17D1, 0x17D2, 0x17D3, 0x180B, 0x180C, 0x180D, 0x18A9, 0x20E5, 0x20E6,
        0x20E7, 0x20E8, 0x20E9, 0x20EA, 0xFE00, 0xFE01, 0xFE02, 0xFE03, 0xFE04, 0xFE05, 0xFE06, 0xFE07, 0xFE08, 0xFE09, 0xFE0A, 0xFE0B, 0xFE0C, 0xFE0D, 0xFE0E, 0xFE0F, 0x01D167, 0x01D168,
        0x01D169, 0x01D17B, 0x01D17C, 0x01D17D, 0x01D17E, 0x01D17F, 0x01D180, 0x01D181, 0x01D182, 0x01D185, 0x01D186, 0x01D187, 0x01D188, 0x01D189, 0x01D18A, 0x01D18B, 0x01D1AA, 0x01D1AB,
        0x01D1AC, 0x01D1AD, 0x0350, 0x0351, 0x0352, 0x0353, 0x0354, 0x0355, 0x0356, 0x0357, 0x0358, 0x0359, 0x035A, 0x035B, 0x035C, 0x035D, 0x035E, 0x035F, 0x05A2, 0x05C5, 0x05C7, 0x0610,
        0x0611, 0x0612, 0x0613, 0x0614, 0x0615, 0x0656, 0x0657, 0x0658, 0x0659, 0x065A, 0x065B, 0x065C, 0x065D, 0x065E, 0x0A01, 0x0AE2, 0x0AE3, 0x0CBC, 0x135F, 0x17DD, 0x1920, 0x1921, 0x1922,
        0x1927, 0x1928, 0x1932, 0x1939, 0x193A, 0x193B, 0x1A17, 0x1A18, 0x1A1B, 0x1DC0, 0x1DC1, 0x1DC2, 0x1DC3, 0x20EB, 0xA802, 0xA806, 0xA80B, 0xA825, 0xA826, 0x010A01, 0x010A02, 0x010A03,
        0x010A05, 0x010A06, 0x010A0C, 0x010A0D, 0x010A0E, 0x010A0F, 0x010A38, 0x010A39, 0x010A3A, 0x010A3F, 0x01D242, 0x01D243, 0x01D244, 0x0E0100, 0x0E0101, 0x0E0102, 0x0E0103, 0x0E0104,
        0x0E0105, 0x0E0106, 0x0E0107, 0x0E0108, 0x0E0109, 0x0E010A, 0x0E010B, 0x0E010C, 0x0E010D, 0x0E010E, 0x0E010F, 0x0E0110, 0x0E0111, 0x0E0112, 0x0E0113, 0x0E0114, 0x0E0115, 0x0E0116,
        0x0E0117, 0x0E0118, 0x0E0119, 0x0E011A, 0x0E011B, 0x0E011C, 0x0E011D, 0x0E011E, 0x0E011F, 0x0E0120, 0x0E0121, 0x0E0122, 0x0E0123, 0x0E0124, 0x0E0125, 0x0E0126, 0x0E0127, 0x0E0128,
        0x0E0129, 0x0E012A, 0x0E012B, 0x0E012C, 0x0E012D, 0x0E012E, 0x0E012F, 0x0E0130, 0x0E0131, 0x0E0132, 0x0E0133, 0x0E0134, 0x0E0135, 0x0E0136, 0x0E0137, 0x0E0138, 0x0E0139, 0x0E013A,
        0x0E013B, 0x0E013C, 0x0E013D, 0x0E013E, 0x0E013F, 0x0E0140, 0x0E0141, 0x0E0142, 0x0E0143, 0x0E0144, 0x0E0145, 0x0E0146, 0x0E0147, 0x0E0148, 0x0E0149, 0x0E014A, 0x0E014B, 0x0E014C,
        0x0E014D, 0x0E014E, 0x0E014F, 0x0E0150, 0x0E0151, 0x0E0152, 0x0E0153, 0x0E0154, 0x0E0155, 0x0E0156, 0x0E0157, 0x0E0158, 0x0E0159, 0x0E015A, 0x0E015B, 0x0E015C, 0x0E015D, 0x0E015E,
        0x0E015F, 0x0E0160, 0x0E0161, 0x0E0162, 0x0E0163, 0x0E0164, 0x0E0165, 0x0E0166, 0x0E0167, 0x0E0168, 0x0E0169, 0x0E016A, 0x0E016B, 0x0E016C, 0x0E016D, 0x0E016E, 0x0E016F, 0x0E0170,
        0x0E0171, 0x0E0172, 0x0E0173, 0x0E0174, 0x0E0175, 0x0E0176, 0x0E0177, 0x0E0178, 0x0E0179, 0x0E017A, 0x0E017B, 0x0E017C, 0x0E017D, 0x0E017E, 0x0E017F, 0x0E0180, 0x0E0181, 0x0E0182,
        0x0E0183, 0x0E0184, 0x0E0185, 0x0E0186, 0x0E0187, 0x0E0188, 0x0E0189, 0x0E018A, 0x0E018B, 0x0E018C, 0x0E018D, 0x0E018E, 0x0E018F, 0x0E0190, 0x0E0191, 0x0E0192, 0x0E0193, 0x0E0194,
        0x0E0195, 0x0E0196, 0x0E0197, 0x0E0198, 0x0E0199, 0x0E019A, 0x0E019B, 0x0E019C, 0x0E019D, 0x0E019E, 0x0E019F, 0x0E01A0, 0x0E01A1, 0x0E01A2, 0x0E01A3, 0x0E01A4, 0x0E01A5, 0x0E01A6,
        0x0E01A7, 0x0E01A8, 0x0E01A9, 0x0E01AA, 0x0E01AB, 0x0E01AC, 0x0E01AD, 0x0E01AE, 0x0E01AF, 0x0E01B0, 0x0E01B1, 0x0E01B2, 0x0E01B3, 0x0E01B4, 0x0E01B5, 0x0E01B6, 0x0E01B7, 0x0E01B8,
        0x0E01B9, 0x0E01BA, 0x0E01BB, 0x0E01BC, 0x0E01BD, 0x0E01BE, 0x0E01BF, 0x0E01C0, 0x0E01C1, 0x0E01C2, 0x0E01C3, 0x0E01C4, 0x0E01C5, 0x0E01C6, 0x0E01C7, 0x0E01C8, 0x0E01C9, 0x0E01CA,
        0x0E01CB, 0x0E01CC, 0x0E01CD, 0x0E01CE, 0x0E01CF, 0x0E01D0, 0x0E01D1, 0x0E01D2, 0x0E01D3, 0x0E01D4, 0x0E01D5, 0x0E01D6, 0x0E01D7, 0x0E01D8, 0x0E01D9, 0x0E01DA, 0x0E01DB, 0x0E01DC,
        0x0E01DD, 0x0E01DE, 0x0E01DF, 0x0E01E0, 0x0E01E1, 0x0E01E2, 0x0E01E3, 0x0E01E4, 0x0E01E5, 0x0E01E6, 0x0E01E7, 0x0E01E8, 0x0E01E9, 0x0E01EA, 0x0E01EB, 0x0E01EC, 0x0E01ED, 0x0E01EE,
        0x0E01EF, 0x0487, 0x05BA, 0x0616, 0x0617, 0x0618, 0x0619, 0x061A, 0x07EB, 0x07EC, 0x07ED, 0x07EE, 0x07EF, 0x07F0, 0x07F1, 0x07F2, 0x07F3, 0x0816, 0x0817, 0x0818, 0x0819, 0x081B, 0x081C,
        0x081D, 0x081E, 0x081F, 0x0820, 0x0821, 0x0822, 0x0823, 0x0825, 0x0826, 0x0827, 0x0829, 0x082A, 0x082B, 0x082C, 0x082D, 0x0900, 0x0955, 0x0A51, 0x0A75, 0x0B44, 0x0B62, 0x0B63, 0x0C62,
        0x0C63, 0x0CE2, 0x0CE3, 0x0D44, 0x0D62, 0x0D63, 0x1033, 0x1034, 0x1035, 0x103A, 0x103D, 0x103E, 0x105E, 0x105F, 0x1060, 0x1071, 0x1072, 0x1073, 0x1074, 0x1082, 0x1085, 0x1086, 0x108D,
        0x109D, 0x1A56, 0x1A58, 0x1A59, 0x1A5A, 0x1A5B, 0x1A5C, 0x1A5D, 0x1A5E, 0x1A60, 0x1A62, 0x1A65, 0x1A66, 0x1A67, 0x1A68, 0x1A69, 0x1A6A, 0x1A6B, 0x1A6C, 0x1A73, 0x1A74, 0x1A75, 0x1A76,
        0x1A77, 0x1A78, 0x1A79, 0x1A7A, 0x1A7B, 0x1A7C, 0x1A7F, 0x1B00, 0x1B01, 0x1B02, 0x1B03, 0x1B34, 0x1B36, 0x1B37, 0x1B38, 0x1B39, 0x1B3A, 0x1B3C, 0x1B42, 0x1B6B, 0x1B6C, 0x1B6D, 0x1B6E,
        0x1B6F, 0x1B70, 0x1B71, 0x1B72, 0x1B73, 0x1B80, 0x1B81, 0x1BA2, 0x1BA3, 0x1BA4, 0x1BA5, 0x1BA8, 0x1BA9, 0x1C2C, 0x1C2D, 0x1C2E, 0x1C2F, 0x1C30, 0x1C31, 0x1C32, 0x1C33, 0x1C36, 0x1C37,
        0x1CD0, 0x1CD1, 0x1CD2, 0x1CD4, 0x1CD5, 0x1CD6, 0x1CD7, 0x1CD8, 0x1CD9, 0x1CDA, 0x1CDB, 0x1CDC, 0x1CDD, 0x1CDE, 0x1CDF, 0x1CE0, 0x1CE2, 0x1CE3, 0x1CE4, 0x1CE5, 0x1CE6, 0x1CE7, 0x1CE8,
        0x1CED, 0x1DC4, 0x1DC5, 0x1DC6, 0x1DC7, 0x1DC8, 0x1DC9, 0x1DCA, 0x1DCB, 0x1DCC, 0x1DCD, 0x1DCE, 0x1DCF, 0x1DD0, 0x1DD1, 0x1DD2, 0x1DD3, 0x1DD4, 0x1DD5, 0x1DD6, 0x1DD7, 0x1DD8, 0x1DD9,
        0x1DDA, 0x1DDB, 0x1DDC, 0x1DDD, 0x1DDE, 0x1DDF, 0x1DE0, 0x1DE1, 0x1DE2, 0x1DE3, 0x1DE4, 0x1DE5, 0x1DE6, 0x1DFD, 0x1DFE, 0x1DFF, 0x20EC, 0x20ED, 0x20EE, 0x20EF, 0x20F0, 0x2CEF, 0x2CF0,
        0x2CF1, 0x2DE0, 0x2DE1, 0x2DE2, 0x2DE3, 0x2DE4, 0x2DE5, 0x2DE6, 0x2DE7, 0x2DE8, 0x2DE9, 0x2DEA, 0x2DEB, 0x2DEC, 0x2DED, 0x2DEE, 0x2DEF, 0x2DF0, 0x2DF1, 0x2DF2, 0x2DF3, 0x2DF4, 0x2DF5,
        0x2DF6, 0x2DF7, 0x2DF8, 0x2DF9, 0x2DFA, 0x2DFB, 0x2DFC, 0x2DFD, 0x2DFE, 0x2DFF, 0xA66F, 0xA67C, 0xA67D, 0xA6F0, 0xA6F1, 0xA8C4, 0xA8E0, 0xA8E1, 0xA8E2, 0xA8E3, 0xA8E4, 0xA8E5, 0xA8E6,
        0xA8E7, 0xA8E8, 0xA8E9, 0xA8EA, 0xA8EB, 0xA8EC, 0xA8ED, 0xA8EE, 0xA8EF, 0xA8F0, 0xA8F1, 0xA926, 0xA927, 0xA928, 0xA929, 0xA92A, 0xA92B, 0xA92C, 0xA92D, 0xA947, 0xA948, 0xA949, 0xA94A,
        0xA94B, 0xA94C, 0xA94D, 0xA94E, 0xA94F, 0xA950, 0xA951, 0xA980, 0xA981, 0xA982, 0xA9B3, 0xA9B6, 0xA9B7, 0xA9B8, 0xA9B9, 0xA9BC, 0xAA29, 0xAA2A, 0xAA2B, 0xAA2C, 0xAA2D, 0xAA2E, 0xAA31,
        0xAA32, 0xAA35, 0xAA36, 0xAA43, 0xAA4C, 0xAAB0, 0xAAB2, 0xAAB3, 0xAAB4, 0xAAB7, 0xAAB8, 0xAABE, 0xAABF, 0xAAC1, 0xABE5, 0xABE8, 0xABED, 0xFE24, 0xFE25, 0xFE26, 0x0101FD, 0x011080,
        0x011081, 0x0110B3, 0x0110B4, 0x0110B5, 0x0110B6, 0x0110B9, 0x0110BA, 0x065F, 0x0859, 0x085A, 0x085B, 0x08E4, 0x08E5, 0x08E6, 0x08E7, 0x08E8, 0x08E9, 0x08EA, 0x08EB, 0x08EC, 0x08ED,
        0x08EE, 0x08EF, 0x08F0, 0x08F1, 0x08F2, 0x08F3, 0x08F4, 0x08F5, 0x08F6, 0x08F7, 0x08F8, 0x08F9, 0x08FA, 0x08FB, 0x08FC, 0x08FD, 0x08FE, 0x093A, 0x0956, 0x0957, 0x0F8D, 0x0F8E, 0x0F8F,
        0x135D, 0x135E, 0x1BAB, 0x1BAC, 0x1BAD, 0x1BE6, 0x1BE8, 0x1BE9, 0x1BED, 0x1BEF, 0x1BF0, 0x1BF1, 0x1CF4, 0x1DFC, 0x2D7F, 0xA674, 0xA675, 0xA676, 0xA677, 0xA678, 0xA679, 0xA67A, 0xA67B,
        0xA69F, 0xAAEC, 0xAAED, 0xAAF6, 0x011001, 0x011038, 0x011039, 0x01103A, 0x01103B, 0x01103C, 0x01103D, 0x01103E, 0x01103F, 0x011040, 0x011041, 0x011042, 0x011043, 0x011044, 0x011045,
        0x011046, 0x011100, 0x011101, 0x011102, 0x011127, 0x011128, 0x011129, 0x01112A, 0x01112B, 0x01112D, 0x01112E, 0x01112F, 0x011130, 0x011131, 0x011132, 0x011133, 0x011134, 0x011180,
        0x011181, 0x0111B6, 0x0111B7, 0x0111B8, 0x0111B9, 0x0111BA, 0x0111BB, 0x0111BC, 0x0111BD, 0x0111BE, 0x0116AB, 0x0116AD, 0x0116B0, 0x0116B1, 0x0116B2, 0x0116B3, 0x0116B4, 0x0116B5,
        0x0116B7, 0x016F8F, 0x016F90, 0x016F91, 0x016F92, 0x08FF, 0x0C00, 0x0C81, 0x0D01, 0x1AB0, 0x1AB1, 0x1AB2, 0x1AB3, 0x1AB4, 0x1AB5, 0x1AB6, 0x1AB7, 0x1AB8, 0x1AB9, 0x1ABA, 0x1ABB,
        0x1ABC, 0x1ABD, 0x1CF8, 0x1CF9, 0x1DE7, 0x1DE8, 0x1DE9, 0x1DEA, 0x1DEB, 0x1DEC, 0x1DED, 0x1DEE, 0x1DEF, 0x1DF0, 0x1DF1, 0x1DF2, 0x1DF3, 0x1DF4, 0x1DF5, 0xA9E5, 0xAA7C, 0xFE27, 0xFE28,
        0xFE29, 0xFE2A, 0xFE2B, 0xFE2C, 0xFE2D, 0x0102E0, 0x010376, 0x010377, 0x010378, 0x010379, 0x01037A, 0x010AE5, 0x010AE6, 0x01107F, 0x011173, 0x01122F, 0x011230, 0x011231, 0x011234,
        0x011236, 0x011237, 0x0112DF, 0x0112E3, 0x0112E4, 0x0112E5, 0x0112E6, 0x0112E7, 0x0112E8, 0x0112E9, 0x0112EA, 0x011301, 0x01133C, 0x011340, 0x011366, 0x011367, 0x011368, 0x011369,
        0x01136A, 0x01136B, 0x01136C, 0x011370, 0x011371, 0x011372, 0x011373, 0x011374, 0x0114B3, 0x0114B4, 0x0114B5, 0x0114B6, 0x0114B7, 0x0114B8, 0x0114BA, 0x0114BF, 0x0114C0, 0x0114C2,
        0x0114C3, 0x0115B2, 0x0115B3, 0x0115B4, 0x0115B5, 0x0115BC, 0x0115BD, 0x0115BF, 0x0115C0, 0x011633, 0x011634, 0x011635, 0x011636, 0x011637, 0x011638, 0x011639, 0x01163A, 0x01163D,
        0x01163F, 0x011640, 0x016AF0, 0x016AF1, 0x016AF2, 0x016AF3, 0x016AF4, 0x016B30, 0x016B31, 0x016B32, 0x016B33, 0x016B34, 0x016B35, 0x016B36, 0x01BC9D, 0x01BC9E, 0x01E8D0, 0x01E8D1,
        0x01E8D2, 0x01E8D3, 0x01E8D4, 0x01E8D5, 0x01E8D6, 0x08E3, 0xA69E, 0xFE2E, 0xFE2F, 0x0111CA, 0x0111CB, 0x0111CC, 0x011300, 0x0115DC, 0x0115DD, 0x01171D, 0x01171E, 0x01171F, 0x011722,
        0x011723, 0x011724, 0x011725, 0x011727, 0x011728, 0x011729, 0x01172A, 0x01172B, 0x01DA00, 0x01DA01, 0x01DA02, 0x01DA03, 0x01DA04, 0x01DA05, 0x01DA06, 0x01DA07, 0x01DA08, 0x01DA09,
        0x01DA0A, 0x01DA0B, 0x01DA0C, 0x01DA0D, 0x01DA0E, 0x01DA0F, 0x01DA10, 0x01DA11, 0x01DA12, 0x01DA13, 0x01DA14, 0x01DA15, 0x01DA16, 0x01DA17, 0x01DA18, 0x01DA19, 0x01DA1A, 0x01DA1B,
        0x01DA1C, 0x01DA1D, 0x01DA1E, 0x01DA1F, 0x01DA20, 0x01DA21, 0x01DA22, 0x01DA23, 0x01DA24, 0x01DA25, 0x01DA26, 0x01DA27, 0x01DA28, 0x01DA29, 0x01DA2A, 0x01DA2B, 0x01DA2C, 0x01DA2D,
        0x01DA2E, 0x01DA2F, 0x01DA30, 0x01DA31, 0x01DA32, 0x01DA33, 0x01DA34, 0x01DA35, 0x01DA36, 0x01DA3B, 0x01DA3C, 0x01DA3D, 0x01DA3E, 0x01DA3F, 0x01DA40, 0x01DA41, 0x01DA42, 0x01DA43,
        0x01DA44, 0x01DA45, 0x01DA46, 0x01DA47, 0x01DA48, 0x01DA49, 0x01DA4A, 0x01DA4B, 0x01DA4C, 0x01DA4D, 0x01DA4E, 0x01DA4F, 0x01DA50, 0x01DA51, 0x01DA52, 0x01DA53, 0x01DA54, 0x01DA55,
        0x01DA56, 0x01DA57, 0x01DA58, 0x01DA59, 0x01DA5A, 0x01DA5B, 0x01DA5C, 0x01DA5D, 0x01DA5E, 0x01DA5F, 0x01DA60, 0x01DA61, 0x01DA62, 0x01DA63, 0x01DA64, 0x01DA65, 0x01DA66, 0x01DA67,
        0x01DA68, 0x01DA69, 0x01DA6A, 0x01DA6B, 0x01DA6C, 0x01DA75, 0x01DA84, 0x01DA9B, 0x01DA9C, 0x01DA9D, 0x01DA9E, 0x01DA9F, 0x01DAA1, 0x01DAA2, 0x01DAA3, 0x01DAA4, 0x01DAA5, 0x01DAA6,
        0x01DAA7, 0x01DAA8, 0x01DAA9, 0x01DAAA, 0x01DAAB, 0x01DAAC, 0x01DAAD, 0x01DAAE, 0x01DAAF, 
    ];
    const OFFSETS = [
        [      0,      1,      5,      5,      5,      5,      5,      5,      5,      5,      5,      5,     10,     10,     10,     10,     10,     10,     10,     10,     10,     10,     10,     10,     10,     10,     10 ],
        [     10,     11,     15,     15,     15,     15,     15,     15,     15,     15,     15,     15,     20,     20,     20,     20,     20,     20,     20,     20,     20,     20,     20,     20,     20,     20,     20 ],
        [     20,     21,     25,     25,     25,     25,     25,     25,     25,     25,     25,     25,     30,     30,     30,     30,     30,     30,     30,     30,     30,     30,     30,     30,     30,     30,     30 ],
        [     30,     31,     35,     35,     35,     35,     35,     35,     35,     35,     35,     35,     40,     40,     40,     40,     40,     40,     40,     40,     40,     40,     40,     40,     40,     40,     40 ],
        [     40,     41,     45,     45,     45,     45,     45,     45,     45,     45,     45,     45,     50,     50,     50,     50,     50,     50,     50,     50,     50,     50,     50,     50,     50,     50,     50 ],
        [     50,     51,     55,     55,     55,     55,     55,     55,     55,     55,     55,     55,     60,     60,     60,     60,     60,     60,     60,     60,     60,     60,     60,     60,     60,     60,     60 ],
        [     60,     61,     65,     65,     65,     65,     65,     65,     65,     65,     65,     65,     70,     70,     70,     70,     70,     70,     70,     70,     70,     70,     70,     70,     70,     70,     70 ],
        [     70,     71,     75,     75,     75,     75,     75,     75,     75,     75,     75,     75,     80,     80,     80,     80,     80,     80,     80,     80,     80,     80,     80,     80,     80,     80,     80 ],
        [     80,     81,     85,     85,     85,     85,     85,     85,     85,     85,     85,     85,     90,     90,     90,     90,     90,     90,     90,     90,     90,     90,     90,     90,     90,     90,     90 ],
        [     90,     91,     95,     95,     95,     95,     95,     95,     95,     95,     95,     95,    100,    100,    100,    100,    100,    100,    100,    100,    100,    100,    100,    100,    100,    100,    100 ],
        [    100,    102,    164,    164,    164,    164,    164,    164,    164,    164,    166,    166,    192,    192,    192,    194,    194,    195,    195,    195,    195,    196,    196,    196,    196,    196,    196 ],
        [    196,    198,    209,    209,    209,    209,    209,    209,    209,    209,    209,    209,    234,    234,    234,    236,    236,    236,    236,    236,    237,    237,    237,    237,    237,    237,    237 ],
        [    237,    239,    259,    259,    259,    259,    259,    259,    259,    259,    259,    259,    283,    283,    283,    283,    283,    284,    284,    284,    285,    286,    286,    286,    286,    286,    286 ],
        [    286,    288,    306,    306,    306,    306,    306,    306,    306,    306,    306,    306,    332,    332,    334,    336,    336,    336,    336,    336,    336,    337,    337,    337,    337,    337,    337 ],
        [    337,    339,    393,    393,    393,    393,    393,    393,    393,    393,    395,    395,    419,    419,    420,    422,    422,    423,    423,    423,    423,    424,    424,    424,    424,    424,    424 ],
        [    424,    426,    433,    433,    433,    433,    433,    433,    433,    433,    433,    433,    458,    458,    458,    458,    458,    459,    459,    459,    459,    460,    460,    460,    460,    460,    460 ],
        [    460,    462,    481,    481,    481,    481,    481,    481,    481,    481,    481,    481,    506,    506,    506,    508,    508,    508,    508,    508,    508,    509,    509,    509,    509,    509,    509 ],
        [    509,    511,    533,    533,    533,    533,    533,    533,    533,    533,    535,    535,    557,    557,    557,    558,    558,    558,    558,    558,    558,    560,    560,    560,    560,    560,    560 ],
        [    560,    562,    601,    601,    601,    601,    601,    601,    601,    601,    602,    602,    626,    626,    628,    630,    630,    630,    630,    630,    630,    631,    631,    631,    631,    631,    631 ],
        [    631,    633,    641,    641,    641,    641,    641,    641,    641,    641,    641,    641,    667,    667,    668,    669,    669,    669,    669,    670,    670,    671,    671,    671,    671,    671,    671 ],
        [    671,    673,    688,    688,    688,    688,    688,    688,    688,    688,    688,    688,    714,    714,    714,    716,    716,    716,    716,    716,    716,    718,    718,    718,    718,    718,    718 ],
        [    718,    720,    743,    743,    743,    743,    743,    743,    743,    743,    743,    743,    767,    767,    767,    769,    769,    769,    769,    769,    769,    771,    771,    771,    771,    771,    771 ],
        [    771,    773,    786,    786,    786,    786,    786,    786,    786,    786,    786,    786,    811,    811,    811,    813,    813,    813,    813,    813,    813,    815,    815,    815,    815,    815,    815 ],
        [    815,    817,    839,    839,    839,    839,    839,    839,    839,    839,    841,    841,    866,    866,    866,    867,    867,    867,    867,    867,    868,    869,    869,    869,    869,    869,    869 ],
        [    869,    871,    937,    937,    937,    937,    937,    937,    937,    937,    945,    945,    970,    970,    970,    972,    972,    973,    973,    973,    973,    974,    974,    974,    974,    974,    974 ],
        [    974,    976,    985,    985,    985,    985,    985,    985,    985,    985,    985,    985,   1010,   1010,   1010,   1012,   1012,   1012,   1012,   1012,   1013,   1014,   1014,   1014,   1014,   1014,   1014 ],
        [   1014,   1016,   1021,   1021,   1021,   1021,   1021,   1021,   1021,   1021,   1021,   1021,   1046,   1046,   1046,   1046,   1046,   1046,   1046,   1046,   1046,   1047,   1047,   1047,   1047,   1047,   1047 ],
        [   1047,   1049,   1075,   1075,   1075,   1075,   1075,   1075,   1075,   1075,   1075,   1075,   1098,   1098,   1098,   1100,   1100,   1100,   1100,   1100,   1101,   1102,   1102,   1102,   1102,   1102,   1102 ],
        [   1102,   1104,   1128,   1128,   1129,   1129,   1129,   1129,   1129,   1129,   1131,   1131,   1157,   1157,   1157,   1157,   1157,   1157,   1157,   1157,   1158,   1159,   1159,   1159,   1159,   1159,   1159 ],
        [   1159,   1161,   1178,   1178,   1178,   1178,   1178,   1178,   1178,   1178,   1180,   1180,   1206,   1206,   1206,   1208,   1208,   1208,   1208,   1208,   1208,   1210,   1210,   1210,   1210,   1210,   1210 ],
        [   1210,   1212,   1276,   1276,   1276,   1276,   1276,   1276,   1276,   1276,   1276,   1276,   1302,   1302,   1302,   1305,   1305,   1305,   1305,   1305,   1305,   1306,   1306,   1306,   1306,   1306,   1306 ],
        [   1306,   1308,   1318,   1318,   1318,   1318,   1318,   1318,   1318,   1318,   1318,   1318,   1344,   1344,   1344,   1346,   1346,   1346,   1346,   1347,   1347,   1348,   1348,   1348,   1348,   1348,   1348 ],
        [   1348,   1350,   1368,   1368,   1368,   1368,   1368,   1368,   1368,   1368,   1368,   1368,   1394,   1394,   1394,   1395,   1395,   1395,   1395,   1395,   1396,   1396,   1396,   1396,   1396,   1396,   1396 ],
        [   1396,   1398,   1409,   1409,   1409,   1409,   1409,   1409,   1409,   1409,   1409,   1409,   1435,   1435,   1435,   1435,   1435,   1436,   1436,   1436,   1436,   1437,   1437,   1437,   1437,   1437,   1437 ],
        [   1437,   1439,   1461,   1461,   1461,   1461,   1461,   1461,   1461,   1461,   1463,   1463,   1489,   1489,   1489,   1489,   1489,   1489,   1489,   1489,   1489,   1490,   1490,   1490,   1490,   1490,   1490 ],
        [   1490,   1492,   1510,   1510,   1510,   1510,   1510,   1510,   1510,   1510,   1510,   1510,   1534,   1534,   1534,   1534,   1534,   1535,   1535,   1535,   1535,   1536,   1536,   1536,   1536,   1536,   1536 ],
        [   1536,   1536,   1576,   1576,   1576,   1576,   1576,   1576,   1576,   1576,   1580,   1580,   1580,   1580,   1582,   1583,   1583,   1584,   1584,   1585,   1586,   1586,   1588,   1588,   1588,   1589,   1589 ],
        [   1589,   1589,   1845,   1845,   1938,   1938,   1938,   1938,   1938,   1938,   2039,   2039,   2061,   2061,   2107,   2381,   2381,   2425,   2471,   2622,   2752,   2789,   2872,   2872,   2872,   3007,   3156 ]
    ];

    protected $_key;
    protected $_fakes;
    protected $_challenge;
    protected $_serializer;

    private $_attributes = [
        self::ATTR_ALPHABET => '23456789abcdefghjkmnpqrstuvwxyz',
        self::ATTR_REVERSED => self::RANDOM,
        self::ATTR_NOISE_LENGTH => 2,
        self::ATTR_HTML_LETTER_TAG => 'span',
        self::ATTR_HTML_WRAPPER_TAG => 'div',
        self::ATTR_UNICODE_VERSION => self::UNICODE_6_0_0,
        self::ATTR_HTML_WRAPPER_ID => 'captcha',
        self::ATTR_CHALLENGE_LENGTH => 8,
        self::ATTR_FAKE_CHARACTERS_LENGTH => 2,
        self::ATTR_FAKE_CHARACTERS_STYLE => 'display: none;',
        self::ATTR_FAKE_CHARACTERS_COLOR => self::COLOR_NONE,
        self::ATTR_SIGNIFICANT_CHARACTERS_STYLE => '',
        self::ATTR_SKIP_UNICODE_FOR_CHALLENGE => FALSE,
        self::ATTR_SIGNIFICANT_CHARACTERS_COLOR => self::COLOR_NONE,
    ];

    private $_alphabet_len; // to avoid many strlen($this->_attributes[self::ATTR_ALPHABET])

    const UNINITIALIZED_CHAR = 0x81;
    const UNSIGNIFICANT_CHAR = 0x82;

    private static $colors = [
        self::COLOR_RED   => [ 0, 30, 75, 100, 40, 60 ],
        self::COLOR_GREEN => [ 90, 120, 75, 100, 40, 60 ],
        self::COLOR_BLUE  => [ 210, 240, 75, 100, 40, 60 ],
        self::COLOR_LIGHT => [ 0, 359, 0, 50, 92, 100 ],
        self::COLOR_DARK  => [ 0, 359, 0, 100, 0, 6 ],
    ];

    protected function generateChallenge()
    {
        $this->_fakes = [];
        if ($this->_attributes[self::ATTR_FAKE_CHARACTERS_LENGTH]) {
            $index = range(0, $this->_attributes[self::ATTR_CHALLENGE_LENGTH]);
            shuffle($index);
            for ($i = 0; $i < $this->_attributes[self::ATTR_FAKE_CHARACTERS_LENGTH]; $i++) {
                $this->_fakes[$index[$i]] = substr($this->_attributes[self::ATTR_ALPHABET], rand(0, $this->_alphabet_len - 1), 1);
            }
        }
        $this->_challenge = '';
        for ($i = 0; $i < $this->_attributes[self::ATTR_CHALLENGE_LENGTH]; $i++) {
            // can't use: $token .= $this->_attributes[self::ATTR_ALPHABET][rand(0, $this->_alphabet_len - 1)]; ?!?
            $this->_challenge .= substr($this->_attributes[self::ATTR_ALPHABET], rand(0, $this->_alphabet_len - 1), 1);
        }

        return $this->_challenge;
    }

    protected static function formatCP($cp)
    {
        return sprintf($cp > 0xFFFF ? '%06X' : '%04X', $cp);
    }

    protected function appendIgnorables(&$ret)
    {
        if ($this->_attributes[self::ATTR_NOISE_LENGTH]) {
            for ($i = rand(0, $this->_attributes[self::ATTR_NOISE_LENGTH]); $i > 0; $i--) {
                $ret .= '\\' . self::formatCP(self::TABLE[rand(self::OFFSETS[count(self::OFFSETS)-2][0], self::OFFSETS[count(self::OFFSETS)-2][$this->_attributes[self::ATTR_UNICODE_VERSION] - self::UNICODE_FIRST + 1] - 1)]);
            }
        }
    }

    protected static function hue_to_rgb($m1, $m2, $h)
    {
        if ($h < 0) {
            $h += 360;
        }
        if ($h > 360) {
            $h -= 360;
        }
        if ($h < 60) {
            return ($m1 + ($m2 - $m1) * ($h / 60.0)) * 255.5;
        }
        if ($h < 180) {
            return ($m2 * 255.5);
        }
        if ($h < 240) {
            return ($m1 + ($m2 - $m1) * ((240 - $h) / 60.0)) * 255.5;
        }

        return $m1 * 255.5;
    }

    protected static function hsl_to_rgb($h, $s, $l)
    {
        if ($l == 0) {
            $r = $g = $b = 0;
        } else {
            $s /= 100;
            $l /= 100;
            if ($l <= 0.5) {
                $m2 = $l * ($s + 1);
            } else {
                $m2 = $l + $s - $l * $s;
            }
            $m1 = $l * 2 - $m2;
            $r = self::hue_to_rgb($m1, $m2, $h + 120);
            $g = self::hue_to_rgb($m1, $m2, $h);
            $b = self::hue_to_rgb($m1, $m2, $h - 120);
        }

        return [ $r, $g, $b ];
    }

    protected function setColor($is_significant)
    {
        if ($color_key = $this->_attributes[$is_significant ? CSSCaptcha::ATTR_SIGNIFICANT_CHARACTERS_COLOR : CSSCaptcha::ATTR_FAKE_CHARACTERS_COLOR]) {
            $color = self::$colors[$color_key];
            return vsprintf('color: #%02X%02X%02X; ', self::hsl_to_rgb(rand($color[0], $color[1]), rand($color[2], $color[3]), rand($color[4], $color[5])));
        } else {
            return '';
        }
    }

    protected function renew()
    {
        $this->_serializer->set(
            $this->_key,
            [
                'challenge' => $this->_challenge = $this->generateChallenge(),
                'fakes' => $this->_fakes,
            ]
        );
    }

    public function __construct($key, CSSCaptchaStoreInterface $serializer, array $attributes = [])
    {
        $this->_key = $key;
        $this->_serializer = $serializer;
        foreach ($attributes as $k => $v) {
            $this->setAttribute($k, $v);
        }
        $this->_alphabet_len = strlen($this->_attributes[self::ATTR_ALPHABET]);
        $data = $this->_serializer->get($this->_key);
        $this->_challenge = isset($data['challenge']) ? $data['challenge'] : NULL;
        $this->_fakes = isset($data['fakes']) ? $data['fakes'] : NULL;
        if (
               !$this->_challenge
            || !preg_match('.^[' . preg_quote($this->_attributes[self::ATTR_ALPHABET]) . ']+$.D', $this->_challenge)
        ) {
            $this->renew();
        }
    }

    protected function generateChar(/*&$ret,*/ $index, $character, $significant, $reversed)
    {
        $ret = '';
        $p = intval($character, 36);
        if ($reversed) {
            $ret .= sprintf(
                "#%s %s:nth-child(%s%d) { order: %d; }\n",
                $this->_attributes[self::ATTR_HTML_WRAPPER_ID],
                $this->_attributes[self::ATTR_HTML_LETTER_TAG],
                rand(0, 1) ? '0n+' : '',
                $index + 1,
                strlen($this->_challenge) - $index
            );
        }
        $ret .= '#' . $this->_attributes[self::ATTR_HTML_WRAPPER_ID] . ' ' . $this->_attributes[self::ATTR_HTML_LETTER_TAG] . ':nth-child(';
        if (rand(0, 1)) {
            $ret .= '0n+';
        }
        $ret .= $index + 1;
        $ret .= '):after { content: "';
        $this->appendIgnorables($ret);
        $ret .= '\\';
        if ($this->_attributes[self::ATTR_SKIP_UNICODE_FOR_CHALLENGE]) {
            $ret .= self::formatCP(self::TABLE[rand(self::OFFSETS[$p][0], self::OFFSETS[$p][1] - 1)]);
        } else {
            $ret .= self::formatCP(self::TABLE[rand(self::OFFSETS[$p][1], self::OFFSETS[$p][$this->_attributes[self::ATTR_UNICODE_VERSION] - self::UNICODE_FIRST + 1] - 1)]);
        }
        $this->appendIgnorables($ret);
        $ret .= '"; ';
        $ret .= $this->setColor($significant);
        if ($significant) {
            $ret .= $this->_attributes[self::ATTR_SIGNIFICANT_CHARACTERS_STYLE];
        } else {
            $ret .= $this->_attributes[self::ATTR_FAKE_CHARACTERS_STYLE];
        }
        $ret .= " }\n";

        return $ret;
    }

    public function render($what = 0x11/*self::RENDER_CSS | self::RENDER_HTML*/)
    {
        $ret = '';
        $total_len = strlen($this->_challenge) + count($this->_fakes);

//         $rtl = ($what == self::RENDER_CSS | self::RENDER_HTML) && !$this->_attributes[self::ATTR_ONLY_LTR] && rand(0, 1); # TODO: remove $what == self::RENDER_CSS | self::RENDER_HTML test, implies to move "$rtl" to a higher "scope" (session and/or attribute)

        if ($what & self::RENDER_CSS) {
            $reversed = self::ALWAYS == $this->_attributes[self::ATTR_REVERSED] || (self::RANDOM == $this->_attributes[self::ATTR_REVERSED] && rand(0, 1));
            if ($what & self::RENDER_HTML) {
                $ret .= '<style type="text/css">' . "\n";
            }
            if ($reversed) {
                $ret .= sprintf("#%s { display: flex; flex-direction: row-reverse; }\n", $this->_attributes[self::ATTR_HTML_WRAPPER_ID]);
            }
            $index = range(0, $total_len - 1);
            shuffle($index);
            if ($this->_fakes) {
                $map = array_fill(0, $total_len, self::UNINITIALIZED_CHAR);
                foreach ($this->_fakes as $k => $v) {
                    $map[$k] = self::UNSIGNIFICANT_CHAR;
                }
                for ($i = $j = 0; $i < strlen($this->_challenge); $j++) {
                    if (self::UNINITIALIZED_CHAR == $map[$j]) {
                        $map[$j] = $i++;
                    }
                }
            } else {
                $map = range(0, $total_len - 1);
            }
//             if ($rtl) {
//                 $ret .= '#' . $this->_attributes[self::ATTR_HTML_WRAPPER_ID] . ' { float: left; /*position: absolute; left: 0;*/ height: auto; overflow: hidden; zoom: 1; }' . "\n";
//                 $ret .= '#' . $this->_attributes[self::ATTR_HTML_WRAPPER_ID] . ' span { float: right; }' . "\n";
//                 $ret .= '#' . $this->_attributes[self::ATTR_HTML_WRAPPER_ID] . ':after { content: "."; visibility: hidden; display: block; height: 0; clear: both; }' . "\n";
//                 $map = array_reverse($map);
//             }
            for ($i = 0; $i < $total_len; $i++) {
                if (self::UNSIGNIFICANT_CHAR == $map[$index[$i]]) {
                    $ret .= $this->generateChar($index[$i], $this->_fakes[/*$rtl ? $total_len - 1 - $index[$i] : */$index[$i]], FALSE, $reversed);
                } else {
                    $ret .= $this->generateChar($index[$i], $this->_challenge[$map[$index[$i]]], TRUE, $reversed);
                }
            }
            if ($what & self::RENDER_HTML) {
                $ret .= '</style>';
            }
        }

        if ($what & self::RENDER_HTML) {
            $ret .= '<' . $this->_attributes[self::ATTR_HTML_WRAPPER_TAG] . ' id="' . $this->_attributes[self::ATTR_HTML_WRAPPER_ID] . '">'
                 . str_repeat('<' . $this->_attributes[self::ATTR_HTML_LETTER_TAG] . '></' . $this->_attributes[self::ATTR_HTML_LETTER_TAG] . '>', $total_len)
                 . '</' . $this->_attributes[self::ATTR_HTML_WRAPPER_TAG] . '>';
        }

        return $ret;
    }

    public function validate($user_input)
    {
        $match = function_exists('hash_equals') ? hash_equals($user_input, $this->_challenge) : $user_input === $this->_challenge;
        $this->renew();

        return $match;
    }

    public function cleanup()
    {
        $this->_serializer->remove($this->_key);
    }

    public function getKey()
    {
        return $this->_key;
    }

    public function getChallenge()
    {
        return $this->_challenge;
    }

    public function getAttribute($attribute)
    {
        if (array_key_exists($attribute, $this->_attributes)) {
            return $this->_attributes[$attribute];
        } else {
            return NULL;
        }
    }

    public function setAttribute($attribute, $value)
    {
        if (array_key_exists($attribute, $this->_attributes)) {
            if (self::ATTR_ALPHABET == $attribute && !preg_match('.^[0-9a-z]{2,}$.D', $value)) { // TODO: the regexp doesn't assume characters are distinct
                return FALSE;
            } else if (self::ATTR_UNICODE_VERSION == $attribute && ($value < self::UNICODE_FIRST || $value > self::UNICODE_LAST)) {
                return FALSE;
            } else if (self::ATTR_REVERSED == $attribute && !in_array($value, [ self::ALWAYS, self::NEVER, self::RANDOM ])) {
                return FALSE;
            } else if (in_array($attribute, [ self::ATTR_FAKE_CHARACTERS_COLOR, self::ATTR_SIGNIFICANT_CHARACTERS_COLOR ]) && !array_key_exists($value, self::$colors)) {
                return FALSE;
            }
            $this->_attributes[$attribute] = $value;
            return TRUE;
        } else {
            return FALSE;
        }
    }
}

function captcha_create($key, CSSCaptchaStoreInterface $serializer, array $options = [])
{
    return new CSSCaptcha($key, $serializer, $options);
}

function captcha_render(CSSCaptcha $captcha, $what = 0x11/*CSSCaptcha::RENDER_CSS | CSSCaptcha::RENDER_HTML*/)
{
    return $captcha->render($what);
}

function captcha_validate(CSSCaptcha $captcha, $user_input)
{
    return $captcha->validate($user_input);
}

function captcha_cleanup(CSSCaptcha $captcha)
{
    $captcha->cleanup();
}

function captcha_get_key(CSSCaptcha $captcha)
{
    return $captcha->getKey();
}

function captcha_get_challenge(CSSCaptcha $captcha)
{
    return $captcha->getChallenge();
}

function captcha_get_attribute(CSSCaptcha $captcha, $attribute)
{
    return $captcha->getAttribute($attribute);
}

function captcha_set_attribute(CSSCaptcha $captcha, $attribute, $value)
{
    return $captcha->setAttribute($attribute, $value);
}
